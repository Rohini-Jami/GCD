module gcd_final(x,y,clk,rst,start,done,gcd,anode,cathode);
input [3:0]x,y;
output [3:0]gcd;
input rst,clk,start;
output done;
wire xsel,ysel,xen,yen,gt,lt,eq,out_en;
gcd_dp1 dp1(x,y,clk,rst,xsel,ysel,xen,yen,out_en,gt,lt,eq,gcd);
gcd_cp cp1(clk,rst,start,gt,lt,eq,xen,yen,xsel,ysel,done,out_en);

output reg [7:0] anode,cathode;
reg clk1=0;
reg clk2=0;
integer i=0;
reg [3:0] k=0; //to display values
integer j=0;
reg [1:0]s=0; // to select segement
//to observe output in display
always@(posedge clk)
begin
i<=i+1;
if(i==50000000)
begin
clk1<=~clk1;
i <= 0;
end
end

//segement diplay refresh rate
always@(posedge clk)
begin
j<=j+1;
if(j==50000)
begin
clk2<=~clk2;
j<=0;
end
end

//to change segement based on clock
always@(posedge clk2)
begin
s<=s+1;
if(s==2'b10)
s<=0;
end

//to select segement
always@(posedge clk)
begin
case(s)
4'h0: begin
anode<=8'b0111_1111;
k<=x;
end
4'h1: begin
anode<=8'b1110_1111;
k<=y;
end
4'h2: begin
anode<=8'b1111_1110;
k<=gcd;
end
endcase
end

always@(posedge clk)
begin
case(k)
4'h0:cathode<=8'b0000_0011;
4'h1:cathode<=8'b1001_1111;
4'h2:cathode<=8'b0010_0101;
4'h3:cathode<=8'b0000_1101;
4'h4:cathode<=8'b1001_1001;
4'h5:cathode<=8'b0100_1001;
4'h6:cathode<=8'b0100_0001;
4'h7:cathode<=8'b0001_1111;
4'h8:cathode<=8'b0000_0001;
4'h9:cathode<=8'b0000_1001;
4'hA:cathode<=8'b0001_0001;
4'hB:cathode<=8'b1100_0001;
4'hC:cathode<=8'b0110_0011;
4'hD:cathode<=8'b1000_0101;
4'hE:cathode<=8'b0110_0001;
4'hF:cathode<=8'b0111_0001;
default:cathode<=8'b1111_1111;
endcase
end
endmodule
module gcd_dp1(x,y,clk,rst,xsel,ysel,xen,yen,out_en,gt,lt,eq,gcd);
input [3:0]x,y;
output [3:0]gcd;
input xsel,ysel,xen,yen,out_en,clk,rst;
output gt,lt,eq;
wire [3:0]mx,my;
wire [3:0]rx,ry;
wire [3:0]subx,suby;
mux m1(x,subx,xsel,mx);
dlatch d1(mx,clk,rst,xen,rx);
mux m2(y,suby,ysel,my);
dlatch d2(my,clk,rst,yen,ry);
sub s1(rx,ry,subx);
sub s2(ry,rx,suby);
comp c1(rx,ry,lt,eq,gt);
dlatch d3(rx,clk,rst,out_en,gcd);

endmodule

//subtraction
module sub(a,b,res);
input [3:0]a,b;
output reg [3:0]res;
always@(a,b)
begin
  res <= a-b;
  end
endmodule

//mux2to1
module mux(a,b,s,y);
input [3:0]a,b;
input s;
output reg [3:0]y;
always@(a,b,s)
begin
 case(s)
 0: y<=a;
 1: y<=b;
 endcase
 end
endmodule

//dlatch
module dlatch(d,clk,rst,load,y);
input [3:0]d;
input clk,rst,load;
output reg [3:0]y;
always@(posedge clk,negedge rst)
begin
if(!rst)
y<=0;
else if(load)
y<=d;
 end
endmodule

//comparator
module comp(a,b,altb,aeqb,agtb);
input [3:0]a,b;
output reg altb,aeqb,agtb;
always@(a,b)
begin
if(a>b)
{agtb,aeqb,altb}<=3'b100;
else if(a<b)
{agtb,aeqb,altb}<=3'b001;
else
{agtb,aeqb,altb}<=3'b010;
end
endmodule
module gcd_cp(clk,rst,start,gt,lt,eq,ldx,ldy,asel,bsel,done,out_en);
input clk,rst,start;
input gt,lt,eq;
output reg asel,bsel,out_en;
output reg done,ldx,ldy;
parameter s0=3'd0,s1=3'd1,s2=3'd2,s3=3'd3,s4=3'd4,s5=3'd5,s6=3'd6;
reg [2:0]PS,NS;
initial 
begin
PS<=s0;
NS<=s0;
end
always@(posedge clk,negedge rst)
begin
if(!rst)
PS<=s0;
else
PS<=NS;
end

always@(gt,lt,eq,start,PS)
begin
case(PS)
s0:if(start)
NS<=s1;
else
NS<=s0;
s1:NS<=s2;
s2:NS<=s3;
s3:if(gt==1)
        NS<=s4;
        else if(lt==1)
        NS<=s5;
        else if(eq==1)
        NS<=s6;
s4: NS<=s2;
s5: NS<=s2;
s6: NS<=s0;
 endcase
end

always@(lt,eq,gt,PS)
begin
case(PS)
s0: begin asel=0; bsel=0; ldx=0; ldy=0; done=0; out_en=0; end
s1: begin asel=0; bsel=0; ldx=1; ldy=1; done=0; out_en=0; end 
s2: begin asel=0; bsel=0; ldx=0; ldy=0; done=0; out_en=0; end
s3: begin asel=0; bsel=0; ldx=0; ldy=0; done=0; out_en=0; end
s4: begin asel=1; bsel=0; ldx=1; ldy=0; done=0; out_en=0; end
s5: begin asel=0; bsel=1; ldx=0; ldy=1; done=0; out_en=0; end
s6: begin asel=1; bsel=1; ldx=1; ldy=1; done=1; out_en=1; end
endcase
end
endmodule
